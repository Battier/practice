    " This line should not be removed as it ensures that various options are
    " properly set to work with the Vim-related packages available in Debian. debian.vim
    " Uncomment the next line to make Vim more Vi-compatible
    " NOTE debian.vim sets 'nocompatible'. Setting 'compatible' changes numerous
    " options, so any other options should be set AFTER setting 'compatible'.
    set nocompatible

    " Vim5 and later versions support syntax highlighting. Uncommenting the
    " following enables syntax highlighting by default.
    if has("syntax")
        syntax enable
        syntax on
    endif

    "/usr/share/vim/vim74/colors
    colorscheme solarized8_dark_high

    " detect file type
    filetype on
    filetype plugin on

    " If using a dark background within the editing area and syntax highlighting
    " turn on this option as well
    set background=dark

    " Uncomment the following to have Vim jump to the last position when
    " reopening a file
    if has("autocmd")
        au BufReadPost * if line("'\"") > 1 && line("'\"") <= line("$") | exe "normal! g'\"" | endif
        "have Vim load indentation rules and plugins according to the detected filetype
        filetype plugin indent on
    endif

    " Set filetypes and their syntaxs.
    " - 'syntax on' seems to cover most of this.
    " Set PERL syntax highlighting
    au BufnewFile,BufRead *.t set filetype=perl
    au BufnewFile,BufRead *.p[lm] set filetype=perl
    au BufRead,BufNewFile *.inc,*.cgi,*.pl set filetype=perl

    " Set C++ syntax highlighting
    au BufRead,BufNewFile *.cpp,*.hpp set filetype=cpp

    " Set C syntax highlighting
    au BufRead,BufNewFile *.c,*.h set filetype=c

    " Set Python syntax highlighting
    au BufRead,BufNewFile *.py set filetype=python

    " Set Ruby syntax highlighting
    au BufRead,BufNewFile *.rb set filetype=ruby

    " Set Yaml syntax highlighting
    au BufRead,BufNewFile *.yml set filetype=yaml

    " Set Html syntax highlighting
    au BufnewFile,BufRead *.tt set filetype=html
    au BufnewFile,BufRead *.tmpl set filetype=html

    " Set sql syntax highlighting
    au BufRead,BufNewFile *.sql set filetype=sql

    " Set javascript syntax highlighting
    au BufRead,BufNewFile *.js,*.js.coffee set filetype=javascript

    " Set css syntax highlighting
    au BufRead,BufNewFile *.css set filetype=css

    " Set scss syntax highlighting
    au BufRead,BufNewFile *.scss set filetype=scss

    " Set php syntax highlighting
    au BufRead,BufNewFile *.php set filetype=php

    " Highlights before selecting color scheme
    :autocmd ColorScheme * highlight Todo ctermbg=red ctermfg=white
    :autocmd BufWinEnter * match Todo /TODO/
    :autocmd BufWinEnter * match Todo /TODO:/
    :autocmd BufWinEnter * match Todo /FIXME/
    :autocmd BufWinEnter * match Todo /FIXME:/

    "--The following are commented out as they cause vim to behave a lot
    " differently from regular Vi. They are highly recommended though.

    "Ignoring case in a pattern
    set ignorecase

    "Override the 'ignorecase' option if the search pattern contains upper case characters
    "set smartcase

    "Write the contents of the file, if it has been modified.
    set autowrite

    "Copy indent from current line when starting a new line.
    set autoindent

    "Do smart autoindenting when starting a new line.
    "set smartindent

    "Number of spaces that a <Tab> in the file counts for.
    set tabstop=4

    "Number of spaces that a <Tab> counts for while performing editing operations, like inserting a <Tap> or using <BS>.
    set softtabstop=4   

    set shiftwidth=4

    "Enables automatic C program indenting.
    set cindent

    "The 'cinooptions' affect the way 'cindent' reindents lines in a C program.
    set cinoptions={0,1s,t0,n-2,p2s,(03s,=.5s,>1s,=1s,:1s

    set backspace=indent,eol,start

    "When a bracket is inserted, briefly jump to the matching one.
    set showmatch

    "If on Vim will wrap long lines at a character in 'breakat' rather than at the last character that fits on the screen.
    set linebreak

    set whichwrap=b,s,<,>,[,]

    " Hide buffers when they are abandoned
    "set hidden 

    set mouse=a            " Enable mouse usage (all modes)

    set number            " Enable line number

    "set previewwindow    

    set history=50        " set command history to 50
    set expandtab

    set laststatus=2
    set ruler

    set showcmd
    set showmode

    "--find setting--
    set incsearch
    let perl_extended_vars=1    
    set hlsearch

    "--ctags setting--
    map <F5> :!ctags -R --c++-kinds=+p --fields=+iaS --extra=+q .<CR><CR> :TlistUpdate<CR>
    imap <F5> <ESC>:!ctags -R --c++-kinds=+p --fields=+iaS --extra=+q .<CR><CR> :TlistUpdate<CR>
    set tags=tags
    set tags+=./tags "add current directory's generated tags file
    map <F3> <C-X><C-O>
    imap <F2> <C-X><C-I>
    set completeopt=menu,menuone
    let OmniCpp_MayCompleteDot = 1 " autocomplete with .
    let OmniCpp_MayCompleteArrow = 1 " autocomplete with ->
    let OmniCpp_MayCompleteScope = 1 " autocomplete with ::
    let OmniCpp_SelectFirstItem = 2 " selec	first item (but don't insert)
    let OmniCpp_NamespaceSearch = 2 " search namespaces in this and included files
    let OmniCpp_ShowPrototypeInAbbr = 1 "show function prototype in popup window
    let OmniCpp_GlobalScopeSearch=1 "enable the global scope search
    let OmniCpp_DisplayMode=1 "Class scope completion mode:always show all members
    "let OmniCpp_DefaultNamespaces=["std"]
    let OmniCpp_ShowScopeInAbbr=1
    " show scope in abbreviation and remove the last column
    let OmniCpp_ShowAccess=1

    "-- Taglist setting --
    let Tlist_Ctags_Cmd='ctags'
    let Tlist_Use_Right_Window=0
    let Tlist_Show_One_File=0
    let Tlist_File_Fold_Auto_Close=1
    let Tlist_Exit_OnlyWindow=1
    let Tlist_Process_File_Always=1
    let Tlist_Inc_Winwidth=0

    "-- Taglist setting for perl --
    let tlist_perl_settings='perl;p:package;u:use;r:role;e:extends;c:constant;a:attribute;s:subroutine;m:method;l:label'    

    nmap <F6> :Tlist<cr>

    "-- WinManager setting --
    let g:winManagerWindowLayout='FileExplorer|TagList'
    "let g:persistentBehaviour=0 "
    nmap wm :WMToggle<cr>
    nmap wc :BottomExplorerWindow<cr>

    " -- MiniBufferExplorer --
    let g:miniBufExplMapWindowNavVim = 1
    let g:miniBufExplMapWindowNavArrows = 1
    let g:miniBufExplMapCTabSwitchBufs = 1
    "let g:miniBufExplMapCTabSwitchWindows = 1
    let g:miniBufExplModSelTarget = 1 

    "--fold setting--
    set foldmethod=syntax
    set foldlevel=100
    set foldcolumn=5

    "-- Cscope setting --
    if has("cscope")
        set csprg=/usr/bin/cscope
        set csto=0
        set cst
        set cscopequickfix=s-,c-,d-,i-,t-,e-
        set nocsverb
        if filereadable("cscope.out")
            cs add cscope.out
        elseif $CSCOPE_DB != ""
            cs add $CSCOPE_DB
        endif
        set csverb
    endif
    map <F4> :cs add ./cscope.out .<CR><CR><CR> :cs reset<CR>
    imap <F4> <ESC>:cs add ./cscope.out .<CR><CR><CR> :cs reset<CR>
    nmap <C-\>s :cs find s <C-R>=expand("<cword>")<CR><CR> :copen<CR><CR>
    nmap <C-\>g :cs find g <C-R>=expand("<cword>")<CR><CR>
    nmap <C-\>d :cs find d <C-R>=expand("<cword>")<CR><CR> :copen<CR><CR>
    nmap <C-\>c :cs find c <C-R>=expand("<cword>")<CR><CR> :copen<CR><CR>
    nmap <C-\>t :cs find t <C-R>=expand("<cword>")<CR><CR> :copen<CR><CR>
    nmap <C-\>e :cs find e <C-R>=expand("<cword>")<CR><CR> :copen<CR><CR>
    nmap <C-\>f :cs find f <C-R>=expand("<cfile>")<CR><CR>
    nmap <C-\>i :cs find i <C-R>=expand("<cfile>")<CR><CR> :copen<CR><CR>

    "--grep setting--
    nnoremap <silent> <F3> :Grep<CR>
    
